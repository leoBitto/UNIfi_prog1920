/*
 * Un numero positivo n e' primo se e' maggiore di 1 e se e' divisibile			1 CRIVELLO==>TUTTI I NUMERI MINORI E PRIMI
 * solo per 1 e per se stesso. Un numero primo e' circolare se ogni sua 		2 PER OGNI NUMERO MINORE E PRIMO
 * permutazione circolare e' anche un numero primo. Ad esempio, 113 e' 				2A CALCOLA PERMUTAZIONI
 * un numero primo circolare in quanto anche 131 e 311 sono numeri primi. 		3 PER OGNI PERMUTAZIONE CONTROLLA SE PRIMO
 * Al contrario, 29 non e' circolare in quanto 92 non e' primo. Osserviamo 		4 SE TUTTI PRIMI AUMENTA CONTATORE
 * che un numero primo che contiene lo 0 tra le sue cifre non puo' essere un 	5 RESTITUISCI CONTATORE
 * numero primo circolare: ad esempio, il numero primo 101 ha la permutazione
 * circolare 110 che, chiaramente, non Ã¨ un numero primo. Scrivere un metodo,
 * chiamato circularPrime, che dato in input un numero intero n positivo, 
 * restituisca il numero di numeri primi circolari minori o uguali a n. 
 * Per definire il metodo si suggerisce di fare uso del metodo del crivello 
 * di Eratostene, cosi' definito. Si considerano tutti i numeri interi a 
 * partire da 2 fino a n. Poi si "cancellano" tutti i multipli di 2 
 * (escluso 2 stesso). Si prende poi il primo numero non cancellato maggiore
 * di 2 e si ripete l'operazione con i suoi multipli (escluso lui stesso),
 * proseguendo in questo modo fino a che non si applica l'operazione 
 * all'ultimo numero non cancellato. I numeri che non sono stati cancellati 
 * sono i numeri primi minori o uguali a n.
 * 
 * ESEMPI
 * Input: 100
 * Output: 13 
 * 
 * Input: 200
 * Output: 17 
 * 
 * Input: 300
 * Output: 17 
 * 
 * Input: 400
 * Output: 20 
 */
int circularPrime(int n) {
	//contatore valori Primi Minori Circolari
	int PMC = 0;
	// crea nuovo array e riempilo di numeri fino a n
	int [] a = new int[n-1];
	//crea array di numeri da crivellare
	for(int i=0;i<a.length;i++) { 
		a[i]=i+2;
	}
	
	print(a);
	print(eratostene(a));
	// per ogni valore in a..
	for( int i=0; i<a.length; i++) {
		// .. diverso da -1
		if(a[i]!=-1) {
			System.out.println(a[i]);
			if(isCircular(a[i])==true) {
				PMC++;
			}
		}
	}
	

	System.out.println("numero di primi circolari minori di n: " + PMC);
	
	return PMC;
}




void print(int [] a) {
	for( int i=0;i<a.length;i++) {
		System.out.print(" " + a[i]);
	}
	System.out.println();
}

boolean isPrime(int n) {
	boolean itIs = true;
	for(int i=2;i<n/2;i++) {
		if(n%i==0) {
			itIs= false;
		}
	}
	return itIs;
}

 boolean isCircular(int c) {
	//	conta le cifre
	int numCif=0;
	int p = c;
	while(p>0) {
		p=p/10;
		numCif++;
	}
	int perm = c;
	while(isPrime(perm)) {

		int rimosso = perm%10;
		int shifted = perm/10;
		perm = (int)((Math.pow(10, numCif-1))*rimosso + shifted);

		if(perm==c) {
			System.out.println("circolare: " + c);
			return true;
		}
	}
	return false;
}


int [] eratostene(int[]a) {
	//valore di cui cercare i multipli
	int p=2;
	//variabile indice di p
	int j=0;
	//esegui per tutto il vettore, si puo ottimizzare questa cosa
	while(j<a.length/2) {
		
		//ciclo che leva i multipli, ha un offset dato da j
		for(int i=j;i<a.length;i=i+p) {
			if(a[i]<=p) {
				continue;
			}else {
				a[i]=-1;
			}
		}
//		print(a);
		// ciclo che ricalcola p "trova il prossimo numero da cancellare"
		// cerca un numero finche non lo trova piu grande poi cambia il valore
//		System.out.println("j1: " + j);
//		System.out.println("p1: " + p);
		while(a[j]<=p&&j<a.length-1){
			j++;
		}
		if(a[j]!=-1) {
			p=a[j];
		}else {break;}
		
//		System.out.println("j2: " + j);
//	
//		System.out.println("p2: " + p);
	}
	return a;
}




circularPrime(100);
